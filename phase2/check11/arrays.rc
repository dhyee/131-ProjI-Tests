int x[2][2];

function : int foo(int i) {
    int a = 0x10A;
    int b = 070;
    return a+b;
}
function : int test3() {
    return foo(x[0][0]);
}

function : int test4() {
    return foo(x[0]); // error
}

function : void test1() {
    float a[10];
    float b[10];
    const int c2 = 5;
    bool arr[c2]; // note: "Type" isn't valid
    int d2 = 10;
    d2++;
    d2 = -c2;
    d2 = -(-(c2+2));
    bool arr2[d2]; // error -- const
    float e = 11;
    float arr3[e]; // error
    int arr4[-1]; // error: unary signs. negative checking
    float arr5[-(-6)];
    bool arr6[-10]; // error
    bool arr7[0]; // error

    float c[2][10];
    bool d[5][4][3][2][1];
}

function : void test2() {
    const int cc = 1;
    int a[10];
    int b[10];
    int c[2][10];
    //float * d;
    c[1][9] = a[9];
    b[b[b[b[2] - cc] + cc] - 1] = c[1][9];
    int d = c[2]; // error out of bounds
    int e = c[0]; // error illegal assignment array to int
    int f = c[1][8]; // okay
    int g[9];
    g = c[1]; // error bc array sizes
}

function : void test5(int & arr[10]) { // length has to be defined?

}

function : void test6(bool & arr[5][7], int i) {

}

function : int main() {
    int a[10];
    int e[6];
    float f[7];

    test5(a);

    test5(f); // error, internal type
    test5(e); // error, dimensions

    test6(a, 10); // error, a is array of ints, not 5x7 array
    int b[5][7];
    test6(b, 7); // error, internal type of b
    bool c[5][7];
    test6(c, 3); // okay
    bool d[4][6];
    test6(d, 3); // error, d's dimensions

    exit(a[1]);
    return 0;
}

function : int testHexOct() {
    int a = 0xA; // length 10;
    int arr[a];     // error
    const int c = 0xA;
    int arr2[c];
    int h = 010; // index 8
    int d = arr2[h];
    if(d == arr2[1]) {

    }
    if(arr2[1] == arr2[1]) {

    }
    bool b[5];
    if(b[4]) {

    }
    if(b[5]) {
        // error
    }
    if(arr2[0]) {
        // error
    }
    bool arr3[5][3][9];
    if(arr3[0]) {
        // error
    }
    if(arr3[0][1]) { // || arr3[0]) {
        // error
    }
    if(arr3[3][2][7]) {

    }
    if(arr3) {
        // error
    }
    return arr2[h];
}

function : void moreTests() {
   int arr[5];
   const int b = arr[4]; // error
   int arr2[5][3];
   int arr3[arr2[0]]; // error
}

function : void arrayNameNotAssignable() {
    int a[10];
    int b[10];
    a = b; // error
}